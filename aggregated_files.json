[
  {
    "filename": "main.py",
    "language": "Python",
    "content": "import os\nimport uvicorn\nfrom fastapi import FastAPI, HTTPException\nfrom pydantic import BaseModel\nfrom typing import List, Dict\n\n# Set your OpenAI API key from environment\nOPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\")\nif not OPENAI_API_KEY:\n    raise EnvironmentError(\"Please set the OPENAI_API_KEY environment variable.\")\n\napp = FastAPI()\n\n# In-memory session storage per agent\nsessions: Dict[str, List[Dict[str, str]]] = {}\n\n# -------------------------------------------------------------------------\n# STRONGER GOALS in the system prompt:\n# We instruct the agent to collaborate to find a missing part (\"O2 regulator\").\n# Also remind them to move, do nothing, or converse.\n# -------------------------------------------------------------------------\nDEFAULT_SYSTEM_PROMPT = \"\"\"\\\nYou are a game agent. You have a primary goal: collaborate with other agents to find the missing O2 regulator part on this Mars base.\nYou can MOVE to exactly one of these four locations: park, library, 02_Regulator_Room, gym (or move to another agent).\nYou can choose to do NOTHING, or you can CONVERSE with another agent. \nYou must always provide at least one sentence of reasoning before your final line. \nYour final line must be in one of the forms:\nMOVE: <location or agent_name>\nNOTHING: do nothing\nCONVERSE: <agent_name>\n\"\"\"\n\ndef get_or_create_session(agent_id: str, system_prompt: str) -> List[Dict[str, str]]:\n    if agent_id not in sessions:\n        sessions[agent_id] = [{\"role\": \"system\", \"content\": system_prompt}]\n    return sessions[agent_id]\n\ndef build_prompt(conversation: List[Dict[str, str]]) -> str:\n    \"\"\"\n    Build a single prompt string from the conversation history.\n    Append a mandatory instruction to force the final line.\n    \"\"\"\n    prompt_lines = []\n    for msg in conversation:\n        prompt_lines.append(f\"{msg['role'].capitalize()}: {msg['content']}\")\n    prompt_lines.append(\"Assistant:\")\n    prompt_lines.append(\n        \"Remember to provide at least one sentence of reasoning, \"\n        \"then end with exactly one line that starts with MOVE:, NOTHING:, or CONVERSE:.\"\n    )\n    return \"\\n\".join(prompt_lines)\n\n# =============================================================================\n# OpenAI ChatGPT Wrapper (with higher temperature)\n# =============================================================================\n\nclass OpenAIChatGPT:\n    def __init__(self, api_key: str, model: str = \"gpt-4o-mini-2024-07-18\"):\n        from openai import OpenAI\n        self.api_key = api_key\n        self.model = model\n        self.client = OpenAI(api_key=api_key)\n\n    def generate(self, prompt: str) -> str:\n        response = self.client.chat.completions.create(\n            model=self.model,\n            messages=[{\"role\": \"system\", \"content\": prompt}],\n            temperature=1.0,  # HIGHER TEMPERATURE for more creativity\n        )\n        return response.choices[0].message.content\n\n# =============================================================================\n# Pydantic Models\n# =============================================================================\n\nclass GenerateRequest(BaseModel):\n    agent_id: str\n    user_input: str\n    system_prompt: str = DEFAULT_SYSTEM_PROMPT\n\nclass GenerateResponse(BaseModel):\n    agent_id: str\n    text: str    # Full response text from the LLM\n    action: str  # \"move\", \"nothing\", or \"converse\"\n    location: str  # for \"move\": one of \"park\", \"library\", \"02_Regulator_Room\", \"gym\" or agent name; for \"converse\": agent name\n\n# =============================================================================\n# FastAPI Endpoint\n# =============================================================================\n\n@app.post(\"/generate\", response_model=GenerateResponse)\ndef generate_response(data: GenerateRequest):\n    # Get or create conversation\n    conversation = get_or_create_session(data.agent_id, data.system_prompt)\n\n    # Add user input\n    conversation.append({\"role\": \"user\", \"content\": data.user_input})\n\n    # Build prompt\n    prompt = build_prompt(conversation)\n\n    # Generate LLM response\n    llm = OpenAIChatGPT(api_key=OPENAI_API_KEY, model=\"gpt-4o-mini-2024-07-18\")\n    assistant_text = llm.generate(prompt)\n\n    # Basic validation: ensure there's at least one line of reasoning\n    lines = assistant_text.strip().split(\"\\n\")\n    if len(lines) < 2:\n        # Not enough lines => no reasoning\n        assistant_text = \"Your response is invalid. You must provide at least one sentence of reasoning.\\nNOTHING: do nothing\"\n    else:\n        # Check final line is one of [MOVE:, NOTHING:, CONVERSE:]\n        final_line = lines[-1].strip().lower()\n        if not (final_line.startswith(\"move:\") or final_line.startswith(\"nothing:\") or final_line.startswith(\"converse:\")):\n            # Force a retry\n            assistant_text = \"Your final line did not start with MOVE:, NOTHING:, or CONVERSE:. Invalid response.\\nNOTHING: do nothing\"\n\n    # Add the assistant's text to conversation\n    conversation.append({\"role\": \"assistant\", \"content\": assistant_text})\n\n    # Parse out the action and location\n    action = \"none\"\n    location = \"\"\n    for line in assistant_text.splitlines():\n        l = line.strip().lower()\n        if l.startswith(\"move:\"):\n            action = \"move\"\n            loc = line.split(\":\", 1)[1].strip().lower()\n            location = loc\n            break\n        elif l.startswith(\"nothing:\"):\n            action = \"nothing\"\n            break\n        elif l.startswith(\"converse:\"):\n            action = \"converse\"\n            loc = line.split(\":\", 1)[1].strip()\n            location = loc\n            break\n\n    return GenerateResponse(\n        agent_id=data.agent_id,\n        text=assistant_text,\n        action=action,\n        location=location\n    )\n\nif __name__ == \"__main__\":\n    uvicorn.run(app, host=\"127.0.0.1\", port=3000)\n"
  },
  {
    "filename": "AgentBrain.cs",
    "language": "Unknown",
    "content": "using UnityEngine;\nusing UnityEngine.AI;\nusing System.Collections;\nusing System;\nusing System.Net.Http;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Linq;\n\n[Serializable]\npublic class RequestData\n{\n    public string agent_id;\n    public string user_input;\n    public string system_prompt;\n}\n\npublic class AgentBrain : MonoBehaviour\n{\n    [SerializeField] public string agentId = \"AgentA\";\n    [SerializeField] private string serverUrl = \"http://127.0.0.1:3000/generate\";\n    [SerializeField] private NavMeshAgent navMeshAgent;\n\n    [SerializeField, Tooltip(\"Set the agent's personality. This will be injected into its system prompt.\")]\n    public string personality = \"You are assertive, friendly, and eager to collaborate to find the missing O2 regulator.\";\n\n    // The system prompt now references the missing O2 regulator more explicitly\n    // This portion will be appended to the final system_prompt on the Python side if desired,\n    // or used stand-alone here if you prefer. \n    private readonly string centralSystemPrompt = @\"\nYou are an autonomous game agent with the following personality:\n[PERSONALITY_HERE]\n\nPRIMARY GOAL: Collaborate with any other agents to locate the missing O2 regulator on this Mars base.\nYou can:\n1) MOVE to 'park', 'library', 'o2_Regulator_Room', 'gym', or move toward another agent by naming them.\n2) NOTHING: do nothing.\n3) CONVERSE: have a multi-round chat with a specific agent by naming them.\n\nIMPORTANT RULES:\n- Provide at least one sentence of reasoning in your response.\n- The final line MUST begin with one of: MOVE:, NOTHING:, CONVERSE:\n- If you fail to provide reasoning or break the final-line rule, your response is invalid.\n\";\n\n    // Variables to track last action feedback, movement, conversation state, etc.\n    private string lastActionFeedback = \"No action taken yet.\";\n    private string lastMoveLocation = \"\";\n\n    private bool isMoving = false;\n    private bool inConversation = false;\n    private string converseTarget = \"\";\n    private int converseRounds = 0;\n\n    private static readonly HttpClient httpClient = new HttpClient();\n\n    void Start()\n    {\n        if (navMeshAgent == null)\n            navMeshAgent = GetComponent<NavMeshAgent>();\n\n        Debug.Log($\"Agent {agentId} started. Waiting for simulation cycle trigger...\");\n    }\n\n    // Build final system prompt by combining the central prompt with the agent's personality.\n    private string BuildSystemPrompt()\n    {\n        // Insert the personality text where [PERSONALITY_HERE] is.\n        return centralSystemPrompt.Replace(\"[PERSONALITY_HERE]\", personality);\n    }\n\n    public void RequestDecision(string input)\n    {\n        Debug.Log($\"Agent {agentId} sending decision request with input:\\n{input}\");\n        StartCoroutine(SendToAI(input));\n    }\n\n    private IEnumerator SendToAI(string input)\n    {\n        RequestData requestData = new RequestData\n        {\n            agent_id = agentId,\n            user_input = input,\n            system_prompt = BuildSystemPrompt()\n        };\n\n        string jsonString = JsonUtility.ToJson(requestData);\n        Debug.Log($\"Agent {agentId} Request JSON: {jsonString}\");\n\n        var content = new StringContent(jsonString, Encoding.UTF8, \"application/json\");\n        Task<HttpResponseMessage> postTask = httpClient.PostAsync(serverUrl, content);\n        yield return new WaitUntil(() => postTask.IsCompleted);\n\n        HttpResponseMessage response = postTask.Result;\n        if (!response.IsSuccessStatusCode)\n        {\n            Debug.LogError($\"Agent {agentId} Server error: {response.StatusCode}\");\n            yield break;\n        }\n\n        string responseJson = response.Content.ReadAsStringAsync().Result;\n        GenerateResponse resp = JsonUtility.FromJson<GenerateResponse>(responseJson);\n\n        Debug.Log($\"Agent {agentId} | AI Output: {resp.text}\");\n        Debug.Log($\"Agent {agentId} | Action: {resp.action}, Location: {resp.location}\");\n\n        // Extract reasoning lines (all but final line)\n        string[] lines = resp.text.Split(new[] { '\\n' }, StringSplitOptions.RemoveEmptyEntries);\n        if (lines.Length > 1)\n        {\n            string reasoning = string.Join(\"\\n\", lines.Take(lines.Length - 1));\n            Debug.Log($\"Agent {agentId} Reasoning: {reasoning}\");\n        }\n        else\n        {\n            Debug.Log($\"Agent {agentId} Reasoning: (none provided)\");\n        }\n\n        // Process the final action\n        switch (resp.action.ToLower())\n        {\n            case \"move\":\n                // If not a predefined location, check if it's an agent\n                if (!IsPredefinedLocation(resp.location))\n                {\n                    AgentBrain targetAgent = GetAgentInProximityByName(resp.location);\n                    if (targetAgent != null)\n                    {\n                        // Move to agent\n                        lastMoveLocation = $\"agent {resp.location}\";\n                        isMoving = true;\n                        navMeshAgent.SetDestination(targetAgent.transform.position);\n                        Debug.Log($\"Agent {agentId} moving toward agent {resp.location} at {targetAgent.transform.position}.\");\n                    }\n                    else\n                    {\n                        lastActionFeedback = $\"Move failed: no agent named {resp.location} nearby.\";\n                    }\n                }\n                else\n                {\n                    // Move to a predefined location\n                    lastMoveLocation = resp.location;\n                    isMoving = true;\n                    AgentTools.MoveToLocation(navMeshAgent, resp.location);\n                }\n                break;\n\n            case \"nothing\":\n                lastActionFeedback = \"Chose to do nothing.\";\n                break;\n\n            case \"converse\":\n                // If already in conversation, skip re-initialization\n                if (inConversation && converseTarget.Equals(resp.location, StringComparison.OrdinalIgnoreCase))\n                {\n                    Debug.Log($\"Agent {agentId} is already conversing with {converseTarget}. Ignoring re-init.\");\n                }\n                else\n                {\n                    AgentBrain converseAgent = GetAgentInProximityByName(resp.location);\n                    if (converseAgent != null)\n                    {\n                        inConversation = true;\n                        converseTarget = resp.location;\n                        converseRounds = 4; // 4-step conversation\n                        lastActionFeedback = $\"Initiated conversation with {resp.location}.\";\n                        Debug.Log($\"Agent {agentId} entering conversation mode with {resp.location} for {converseRounds} rounds.\");\n                    }\n                    else\n                    {\n                        lastActionFeedback = $\"Converse failed: no agent named {resp.location} nearby.\";\n                    }\n                }\n                break;\n\n            default:\n                lastActionFeedback = \"Unknown action returned.\";\n                break;\n        }\n\n        // If we're in conversation mode, decrement round count each time\n        if (inConversation)\n        {\n            converseRounds--;\n            if (converseRounds <= 0)\n            {\n                inConversation = false;\n                lastActionFeedback = $\"Conversation ended with {converseTarget}.\";\n                converseTarget = \"\";\n            }\n        }\n    }\n\n    void Update()\n    {\n        if (isMoving && !navMeshAgent.pathPending)\n        {\n            if (navMeshAgent.remainingDistance <= navMeshAgent.stoppingDistance)\n            {\n                if (!navMeshAgent.hasPath || navMeshAgent.velocity.sqrMagnitude == 0f)\n                {\n                    isMoving = false;\n                    lastActionFeedback = $\"Used move tool to successfully move to {lastMoveLocation}.\";\n                    Debug.Log($\"Agent {agentId} reached destination: {lastMoveLocation}\");\n                }\n            }\n        }\n    }\n\n    /// <summary>\n    /// Builds feedback about the last action plus a scan of nearby agents.\n    /// </summary>\n    public string GetFeedbackMessage()\n    {\n        Collider[] hitColliders = Physics.OverlapSphere(transform.position, 30f);\n        string nearbyInfo = \"\";\n        foreach (var hitCollider in hitColliders)\n        {\n            AgentBrain otherAgent = hitCollider.GetComponent<AgentBrain>();\n            if (otherAgent != null && otherAgent.agentId != this.agentId)\n            {\n                Vector3 pos = otherAgent.transform.position;\n                if (!string.IsNullOrEmpty(nearbyInfo))\n                    nearbyInfo += \"; \";\n                nearbyInfo += $\"{otherAgent.agentId} ({pos.x:F1},{pos.y:F1},{pos.z:F1})\";\n            }\n        }\n        if (string.IsNullOrEmpty(nearbyInfo))\n            nearbyInfo = \"none\";\n\n        string feedback;\n        if (inConversation)\n            feedback = $\"[CONVERSE mode with {converseTarget}, rounds remaining: {converseRounds}]\";\n        else\n            feedback = $\"Last action: {lastActionFeedback}. Nearby agents: {nearbyInfo}.\";\n\n        Debug.Log($\"Agent {agentId} Feedback: {feedback}\");\n        return feedback;\n    }\n\n    private bool IsPredefinedLocation(string location)\n    {\n        string[] predefined = { \"park\", \"library\", \"02_Regulator_Room\", \"gym\" };\n        return predefined.Any(loc => loc.Equals(location, StringComparison.OrdinalIgnoreCase));\n    }\n\n    private AgentBrain GetAgentInProximityByName(string targetName)\n    {\n        Collider[] hitColliders = Physics.OverlapSphere(transform.position, 30f);\n        foreach (var hitCollider in hitColliders)\n        {\n            AgentBrain otherAgent = hitCollider.GetComponent<AgentBrain>();\n            if (otherAgent != null && otherAgent.agentId.Equals(targetName, StringComparison.OrdinalIgnoreCase))\n            {\n                return otherAgent;\n            }\n        }\n        return null;\n    }\n}\n\n[Serializable]\npublic class GenerateResponse\n{\n    public string agent_id;\n    public string text;\n    public string action;\n    public string location;\n}\n"
  },
  {
    "filename": "AgentTools.cs",
    "language": "Unknown",
    "content": "using UnityEngine;\nusing UnityEngine.AI;\nusing System.Linq;\n\npublic static class AgentTools\n{\n    /// <summary>\n    /// Moves the given NavMeshAgent to a predefined destination based on the location string.\n    /// If the location string is not one of the predefined ones, attempt to interpret it as a target agent's name.\n    /// </summary>\n    public static void MoveToLocation(NavMeshAgent navMeshAgent, string location)\n    {\n        Vector3 destination;\n        // Check if location is one of the predefined ones.\n        if (IsPredefinedLocation(location))\n        {\n            switch (location.ToLower())\n            {\n                case \"park\":\n                    destination = new Vector3(350.47f, 49.63f, 432.7607f);\n                    break;\n                case \"library\":\n                    destination = new Vector3(325.03f, 50.29f, 407.87f);\n                    break;\n                case \"o2_Regulator_Room\":\n                    destination = new Vector3(324.3666f, 50.33723f, 463.2347f);\n                    break;\n                case \"gym\":\n                    destination = new Vector3(300.5f, 50.23723f, 420.8247f);\n                    break;\n                default:\n                    destination = navMeshAgent.transform.position;\n                    break;\n            }\n        }\n        else\n        {\n            // Otherwise, try to find an agent with matching name within 30 units.\n            AgentBrain targetAgent = GetAgentInProximityByName(navMeshAgent.transform.position, location, 30f);\n            if (targetAgent != null)\n            {\n                destination = targetAgent.transform.position;\n            }\n            else\n            {\n                // If not found, stay in place.\n                destination = navMeshAgent.transform.position;\n            }\n        }\n        navMeshAgent.SetDestination(destination);\n    }\n\n    private static bool IsPredefinedLocation(string location)\n    {\n        string[] predefined = { \"park\", \"library\", \"02_Regulator_Room\", \"gym\" };\n        return predefined.Contains(location.ToLower());\n    }\n\n    private static AgentBrain GetAgentInProximityByName(Vector3 currentPos, string agentName, float radius)\n    {\n        AgentBrain[] agents = UnityEngine.Object.FindObjectsOfType<AgentBrain>();\n        foreach (var agent in agents)\n        {\n            if (agent.agentId.Equals(agentName, System.StringComparison.OrdinalIgnoreCase))\n            {\n                if (Vector3.Distance(currentPos, agent.transform.position) <= radius)\n                    return agent;\n            }\n        }\n        return null;\n    }\n}\n"
  },
  {
    "filename": "WorldManager.cs",
    "language": "Unknown",
    "content": "using UnityEngine;\n\npublic class WorldManager : MonoBehaviour\n{\n    private AgentBrain[] allAgents;\n\n    void Start()\n    {\n        // Collect all AgentBrain scripts in the scene.\n        allAgents = FindObjectsOfType<AgentBrain>();\n        Debug.Log($\"WorldManager: Found {allAgents.Length} agents.\");\n    }\n\n    void Update()\n    {\n        // Check if Shift + X is pressed to manually trigger a simulation cycle.\n        if ((Input.GetKey(KeyCode.LeftShift) || Input.GetKey(KeyCode.RightShift)) \n            && Input.GetKeyDown(KeyCode.X))\n        {\n            RunSimulationCycle();\n        }\n    }\n\n    private void RunSimulationCycle()\n    {\n        Debug.Log(\"WorldManager: Running one simulation cycle...\");\n        foreach (var agent in allAgents)\n        {\n            string feedback = agent.GetFeedbackMessage();\n            agent.RequestDecision(feedback);\n        }\n    }\n}\n"
  }
]