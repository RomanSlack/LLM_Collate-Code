Current code below:
[
  {
    "filename": "main.py",
    "language": "Python",
    "content": "import os\nimport uvicorn\nfrom fastapi import FastAPI, HTTPException\nfrom pydantic import BaseModel\nfrom typing import List, Dict\n\nOPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\")\nif not OPENAI_API_KEY:\n    raise EnvironmentError(\"Please set the OPENAI_API_KEY environment variable.\")\n\napp = FastAPI()\n\n# Store conversation per agent\nsessions: Dict[str, List[Dict[str, str]]] = {}\n\ndef get_or_create_session(agent_id: str, system_prompt: str) -> List[Dict[str, str]]:\n    \"\"\"\n    Creates a conversation session for each agent if not present,\n    starting with the system prompt from Unity.\n    \"\"\"\n    if agent_id not in sessions:\n        sessions[agent_id] = [{\"role\": \"system\", \"content\": system_prompt}]\n    return sessions[agent_id]\n\ndef build_prompt(conversation: List[Dict[str, str]]) -> str:\n    \"\"\"\n    Convert the conversation list into a single prompt string.\n    We'll tack on a final message instructing the LLM to\n    finish with exactly one line that starts with:\n      MOVE:, NOTHING:, or CONVERSE:\n    \"\"\"\n    prompt_lines = []\n    for msg in conversation:\n        # \"role\" is either system, user, assistant\n        prompt_lines.append(f\"{msg['role'].capitalize()}: {msg['content']}\")\n    # Add a final line instructing the LLM to produce one final line\n    prompt_lines.append(\n        \"Assistant:\\nRemember you must provide at least one sentence of reasoning \"\n        \"and end with a line that starts with MOVE:, NOTHING:, or CONVERSE:.\"\n    )\n    return \"\\n\".join(prompt_lines)\n\n# ----------------------------------------------------------------------------\n# OpenAI Wrapper\n# ----------------------------------------------------------------------------\n\nclass OpenAIChatGPT:\n    def __init__(self, api_key: str, model: str = \"gpt-4o-mini-2024-07-18\"):\n        from openai import OpenAI\n        self.api_key = api_key\n        self.model = model\n        self.client = OpenAI(api_key=api_key)\n\n    def generate(self, prompt: str) -> str:\n        response = self.client.chat.completions.create(\n            model=self.model,\n            messages=[{\"role\": \"system\", \"content\": prompt}],\n            temperature=1.0\n        )\n        return response.choices[0].message.content\n\n# ----------------------------------------------------------------------------\n# Pydantic Models\n# ----------------------------------------------------------------------------\n\nclass GenerateRequest(BaseModel):\n    agent_id: str\n    user_input: str\n    system_prompt: str  # No default \u2013 must come from Unity.\n\nclass GenerateResponse(BaseModel):\n    agent_id: str\n    text: str\n    action: str   # \"move\", \"nothing\", \"converse\", or \"none\" if invalid\n    location: str # location or agent name\n\n# ----------------------------------------------------------------------------\n# FastAPI Endpoint\n# ----------------------------------------------------------------------------\n\n@app.post(\"/generate\", response_model=GenerateResponse)\ndef generate_response(data: GenerateRequest):\n    # 1) Retrieve or create a conversation list\n    conversation = get_or_create_session(data.agent_id, data.system_prompt)\n\n    # 2) Append user input to the conversation\n    conversation.append({\"role\": \"user\", \"content\": data.user_input})\n\n    # 3) Build the prompt\n    prompt = build_prompt(conversation)\n\n    # 4) Call the LLM\n    llm = OpenAIChatGPT(api_key=OPENAI_API_KEY)\n    assistant_text = llm.generate(prompt)\n\n    # 5) Basic validation\n    lines = assistant_text.strip().split(\"\\n\")\n    if len(lines) < 2:\n        # Not enough lines => no reasoning\n        assistant_text = (\n            \"Your response is invalid. You must provide at least one sentence of reasoning.\\n\"\n            \"NOTHING: do nothing\"\n        )\n    else:\n        # Check final line\n        final_line = lines[-1].strip().lower()\n        valid_starts = [\"move:\", \"nothing:\", \"converse:\"]\n        if not any(final_line.startswith(x) for x in valid_starts):\n            assistant_text = (\n                \"Your final line did not start with MOVE:, NOTHING:, or CONVERSE:. \"\n                \"Invalid response.\\nNOTHING: do nothing\"\n            )\n\n    # 6) Append the final assistant text\n    conversation.append({\"role\": \"assistant\", \"content\": assistant_text})\n\n    # 7) Parse out the action + location\n    action = \"none\"\n    location = \"\"\n    for line in assistant_text.splitlines():\n        l = line.strip().lower()\n        if l.startswith(\"move:\"):\n            action = \"move\"\n            location = line.split(\":\", 1)[1].strip()\n            break\n        elif l.startswith(\"nothing:\"):\n            action = \"nothing\"\n            break\n        elif l.startswith(\"converse:\"):\n            action = \"converse\"\n            location = line.split(\":\", 1)[1].strip()\n            break\n\n    return GenerateResponse(\n        agent_id=data.agent_id,\n        text=assistant_text,\n        action=action,\n        location=location.lower()  # unify to lower if you want\n    )\n\nif __name__ == \"__main__\":\n    uvicorn.run(app, host=\"127.0.0.1\", port=3000)\n"
  },
  {
    "filename": "AgentBrain.cs",
    "language": "C#",
    "content": "using UnityEngine;\nusing UnityEngine.AI;\nusing System.Collections;\nusing System;\nusing System.Net.Http;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Linq;\n\n[Serializable]\npublic class RequestData\n{\n    public string agent_id;\n    public string user_input;\n    public string system_prompt;\n}\n\npublic class AgentBrain : MonoBehaviour\n{\n    [SerializeField] public string agentId = \"AgentA\";\n    [SerializeField] private string serverUrl = \"http://127.0.0.1:3000/generate\";\n    [SerializeField] private NavMeshAgent navMeshAgent;\n\n    // The entire \"system prompt\" is now configured in the Inspector for each agent.\n    // You can unify personality and instructions here, so each agent has a unique prompt if desired.\n    [TextArea(5,10)]\n    [SerializeField, Tooltip(\"Complete system prompt for this agent.\")]\n    private string systemPrompt = @\"\nYou are an autonomous game agent with a friendly, logical personality.\nYour primary goal: Collaborate with any other agents to locate the missing O2 regulator on this Mars base.\n\nACTIONS:\n1) MOVE: <location_or_agent>\n   Valid locations: park, library, gym, o2_regulator_room\n   Or move toward another agent by naming them.\n\n2) NOTHING: do nothing\n\n3) CONVERSE: <agent_name>\n   Start or continue a conversation with the specified agent.\n\nREQUIREMENTS:\n- Provide a short paragraph of reasoning or explanation in natural language.\n- The VERY LAST line of your response must begin exactly with MOVE:, NOTHING:, or CONVERSE: \n  and contain no additional text on that line.\n\nEXAMPLES:\nExample MOVE:\nI'm heading to the library to search for documents about the O2 regulator.\nMOVE: library\n\nExample NOTHING:\nI see no immediate clues, so I'll stay put for now.\nNOTHING: do nothing\n\nExample CONVERSE:\nAgent_1 might have leads on the regulator, so I'll ask them directly.\nCONVERSE: Agent_1\n\";\n\n    // Variables to track last action feedback, movement, conversation state, etc.\n    private string lastActionFeedback = \"No action taken yet.\";\n    private string lastMoveLocation = \"\";\n    private bool isMoving = false;\n    private bool inConversation = false;\n    private string converseTarget = \"\";\n    private int converseRounds = 0;\n\n    private static readonly HttpClient httpClient = new HttpClient();\n\n    void Start()\n    {\n        if (navMeshAgent == null)\n            navMeshAgent = GetComponent<NavMeshAgent>();\n\n        Debug.Log($\"Agent {agentId} started. Waiting for simulation cycle trigger...\");\n    }\n\n    // This final system prompt is entirely from the Inspector \"systemPrompt\" field.\n    private string BuildSystemPrompt()\n    {\n        return systemPrompt;\n    }\n\n    public void RequestDecision(string input)\n    {\n        Debug.Log($\"Agent {agentId} sending decision request with input:\\n{input}\");\n        StartCoroutine(SendToAI(input));\n    }\n\n    private IEnumerator SendToAI(string input)\n    {\n        // The entire system prompt is set by the Inspector\n        RequestData requestData = new RequestData\n        {\n            agent_id = agentId,\n            user_input = input,\n            system_prompt = BuildSystemPrompt()\n        };\n\n        string jsonString = JsonUtility.ToJson(requestData);\n        Debug.Log($\"Agent {agentId} Request JSON: {jsonString}\");\n\n        var content = new StringContent(jsonString, Encoding.UTF8, \"application/json\");\n        Task<HttpResponseMessage> postTask = httpClient.PostAsync(serverUrl, content);\n        yield return new WaitUntil(() => postTask.IsCompleted);\n\n        HttpResponseMessage response = postTask.Result;\n        if (!response.IsSuccessStatusCode)\n        {\n            Debug.LogError($\"Agent {agentId} Server error: {response.StatusCode}\");\n            yield break;\n        }\n\n        string responseJson = response.Content.ReadAsStringAsync().Result;\n        GenerateResponse resp = JsonUtility.FromJson<GenerateResponse>(responseJson);\n\n        Debug.Log($\"Agent {agentId} | AI Output: {resp.text}\");\n        Debug.Log($\"Agent {agentId} | Action: {resp.action}, Location: {resp.location}\");\n\n        // Extract reasoning lines (all but final line)\n        string[] lines = resp.text.Split(new[] { '\\n' }, StringSplitOptions.RemoveEmptyEntries);\n        if (lines.Length > 1)\n        {\n            string reasoning = string.Join(\"\\n\", lines.Take(lines.Length - 1));\n            Debug.Log($\"Agent {agentId} Reasoning: {reasoning}\");\n        }\n        else\n        {\n            Debug.Log($\"Agent {agentId} Reasoning: (none provided)\");\n        }\n\n        // Process the final action\n        switch (resp.action.ToLower())\n        {\n            case \"move\":\n                HandleMove(resp.location);\n                break;\n            case \"nothing\":\n                lastActionFeedback = \"Chose to do nothing.\";\n                break;\n            case \"converse\":\n                HandleConverse(resp.location);\n                break;\n            default:\n                lastActionFeedback = \"Unknown action returned.\";\n                break;\n        }\n\n        // If we're in conversation mode, decrement round count each time\n        if (inConversation)\n        {\n            converseRounds--;\n            if (converseRounds <= 0)\n            {\n                inConversation = false;\n                lastActionFeedback = $\"Conversation ended with {converseTarget}.\";\n                converseTarget = \"\";\n            }\n        }\n    }\n\n    private void HandleMove(string location)\n    {\n        // If not a known location, maybe it's an agent\n        // (We assume you do that check or use AgentTools. Keep it simple for demonstration.)\n        if (!AgentTools.IsPredefinedLocation(location))\n        {\n            AgentBrain targetAgent = GetAgentInProximityByName(location);\n            if (targetAgent != null)\n            {\n                lastMoveLocation = $\"agent {location}\";\n                isMoving = true;\n                navMeshAgent.SetDestination(targetAgent.transform.position);\n                Debug.Log($\"Agent {agentId} moving toward agent {location} at {targetAgent.transform.position}.\");\n            }\n            else\n            {\n                lastActionFeedback = $\"Move failed: no agent named {location} nearby.\";\n            }\n        }\n        else\n        {\n            lastMoveLocation = location;\n            isMoving = true;\n            AgentTools.MoveToLocation(navMeshAgent, location);\n        }\n    }\n\n    private void HandleConverse(string location)\n    {\n        // If already in conversation with the same agent, ignore\n        if (inConversation && converseTarget.Equals(location, StringComparison.OrdinalIgnoreCase))\n        {\n            Debug.Log($\"Agent {agentId} is already conversing with {converseTarget}. Ignoring re-init.\");\n            return;\n        }\n        // Otherwise, try to start a new conversation\n        AgentBrain agent = GetAgentInProximityByName(location);\n        if (agent != null)\n        {\n            inConversation = true;\n            converseTarget = location;\n            converseRounds = 4;\n            lastActionFeedback = $\"Initiated conversation with {location}.\";\n            Debug.Log($\"Agent {agentId} entering conversation mode with {location} for {converseRounds} rounds.\");\n        }\n        else\n        {\n            lastActionFeedback = $\"Converse failed: no agent named {location} nearby.\";\n        }\n    }\n\n    void Update()\n    {\n        if (isMoving && !navMeshAgent.pathPending)\n        {\n            if (navMeshAgent.remainingDistance <= navMeshAgent.stoppingDistance)\n            {\n                if (!navMeshAgent.hasPath || navMeshAgent.velocity.sqrMagnitude == 0f)\n                {\n                    isMoving = false;\n                    lastActionFeedback = $\"Used move tool to successfully move to {lastMoveLocation}.\";\n                    Debug.Log($\"Agent {agentId} reached destination: {lastMoveLocation}\");\n                }\n            }\n        }\n    }\n\n    public string GetFeedbackMessage()\n    {\n        Collider[] hitColliders = Physics.OverlapSphere(transform.position, 30f);\n        string nearbyInfo = \"\";\n        foreach (var hitCollider in hitColliders)\n        {\n            AgentBrain otherAgent = hitCollider.GetComponent<AgentBrain>();\n            if (otherAgent != null && otherAgent.agentId != this.agentId)\n            {\n                Vector3 pos = otherAgent.transform.position;\n                if (!string.IsNullOrEmpty(nearbyInfo))\n                    nearbyInfo += \"; \";\n                nearbyInfo += $\"{otherAgent.agentId} ({pos.x:F1},{pos.y:F1},{pos.z:F1})\";\n            }\n        }\n        if (string.IsNullOrEmpty(nearbyInfo))\n            nearbyInfo = \"none\";\n\n        string feedback;\n        if (inConversation)\n            feedback = $\"[CONVERSE mode with {converseTarget}, rounds remaining: {converseRounds}]\";\n        else\n            feedback = $\"Last action: {lastActionFeedback}. Nearby agents: {nearbyInfo}.\";\n\n        Debug.Log($\"Agent {agentId} Feedback: {feedback}\");\n        return feedback;\n    }\n\n    private AgentBrain GetAgentInProximityByName(string targetName)\n    {\n        Collider[] hitColliders = Physics.OverlapSphere(transform.position, 30f);\n        foreach (var hitCollider in hitColliders)\n        {\n            AgentBrain other = hitCollider.GetComponent<AgentBrain>();\n            if (other != null && other.agentId.Equals(targetName, StringComparison.OrdinalIgnoreCase))\n            {\n                return other;\n            }\n        }\n        return null;\n    }\n}\n\n[Serializable]\npublic class GenerateResponse\n{\n    public string agent_id;\n    public string text;\n    public string action;\n    public string location;\n}\n"
  },
  {
    "filename": "AgentTools.cs",
    "language": "C#",
    "content": "using UnityEngine;\nusing UnityEngine.AI;\nusing System.Linq;\n\npublic static class AgentTools\n{\n    /// <summary>\n    /// Moves the given NavMeshAgent to a predefined destination based on the location string.\n    /// If the location string is not one of the predefined ones, attempt to interpret it as a target agent's name.\n    /// </summary>\n    public static void MoveToLocation(NavMeshAgent navMeshAgent, string location)\n    {\n        Vector3 destination;\n        if (IsPredefinedLocation(location))\n        {\n            switch (location.ToLower())\n            {\n                case \"park\":\n                    destination = new Vector3(350.47f, 49.63f, 432.7607f);\n                    break;\n                case \"library\":\n                    destination = new Vector3(325.03f, 50.29f, 407.87f);\n                    break;\n                case \"o2_regulator_room\":\n                    destination = new Vector3(324.3666f, 50.33723f, 463.2347f);\n                    break;\n                case \"gym\":\n                    destination = new Vector3(300.5f, 50.23723f, 420.8247f);\n                    break;\n                default:\n                    destination = navMeshAgent.transform.position;\n                    break;\n            }\n        }\n        else\n        {\n            // Otherwise, try to find an agent with matching name within 30 units.\n            AgentBrain targetAgent = GetAgentInProximityByName(navMeshAgent.transform.position, location, 30f);\n            if (targetAgent != null)\n            {\n                destination = targetAgent.transform.position;\n            }\n            else\n            {\n                // If not found, stay in place.\n                destination = navMeshAgent.transform.position;\n            }\n        }\n        navMeshAgent.SetDestination(destination);\n    }\n\n    /// <summary>\n    /// Now public so it\u2019s accessible from AgentBrain.cs.\n    /// Checks if the location string is one of the known, predefined movement spots.\n    /// </summary>\n    public static bool IsPredefinedLocation(string location)\n    {\n        string[] predefined = { \"park\", \"library\", \"o2_regulator_room\", \"gym\" };\n        return predefined.Contains(location.ToLower());\n    }\n\n    private static AgentBrain GetAgentInProximityByName(Vector3 currentPos, string agentName, float radius)\n    {\n        AgentBrain[] agents = UnityEngine.Object.FindObjectsOfType<AgentBrain>();\n        foreach (var agent in agents)\n        {\n            if (agent.agentId.Equals(agentName, System.StringComparison.OrdinalIgnoreCase))\n            {\n                if (Vector3.Distance(currentPos, agent.transform.position) <= radius)\n                    return agent;\n            }\n        }\n        return null;\n    }\n}\n"
  },
  {
    "filename": "WorldManager.cs",
    "language": "C#",
    "content": "using UnityEngine;\n\npublic class WorldManager : MonoBehaviour\n{\n    private AgentBrain[] allAgents;\n\n    void Start()\n    {\n        // Collect all AgentBrain scripts in the scene.\n        allAgents = FindObjectsOfType<AgentBrain>();\n        Debug.Log($\"WorldManager: Found {allAgents.Length} agents.\");\n    }\n\n    void Update()\n    {\n        // Check if Shift + X is pressed to manually trigger a simulation cycle.\n        if ((Input.GetKey(KeyCode.LeftShift) || Input.GetKey(KeyCode.RightShift)) \n            && Input.GetKeyDown(KeyCode.X))\n        {\n            RunSimulationCycle();\n        }\n    }\n\n    private void RunSimulationCycle()\n    {\n        Debug.Log(\"WorldManager: Running one simulation cycle...\");\n        foreach (var agent in allAgents)\n        {\n            string feedback = agent.GetFeedbackMessage();\n            agent.RequestDecision(feedback);\n        }\n    }\n}\n"
  }
]